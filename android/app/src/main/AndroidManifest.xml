<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="29" />
    <!-- For Android 10 (API 29) and below, READ_EXTERNAL_STORAGE is often needed if you read back the file,
         though ImageGallerySaver might handle its own needs.
         For higher APIs, WRITE_EXTERNAL_STORAGE is not generally available or needed for app-specific directories.
         ImageGallerySaver uses MediaStore which is the preferred way.
         If sharing directly from a file path, READ may be needed. -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="29" />

    <!-- For Android 13 (API 33) and above, if directly accessing media files not owned by the app.
         ImageGallerySaver should handle its own permissions via MediaStore,
         but if you were to implement custom gallery access, these would be relevant. -->
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
    <!-- <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" /> --> <!-- If videos were handled -->


    <application
        android:label="lyricapture"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher"
        android:requestLegacyExternalStorage="true">
        <!-- requestLegacyExternalStorage="true" is for Android 10 (API 29).
             It's generally recommended to migrate to Scoped Storage/MediaStore.
             ImageGallerySaver should work with MediaStore. This is more of a fallback. -->
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>
