// Mocks generated by Mockito 5.4.6 from annotations
// in lyricapture/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i16;
import 'dart:typed_data' as _i17;

import 'package:http/http.dart' as _i6;
import 'package:lyricapture/data/datasources/lrclib_remote_data_source.dart'
    as _i15;
import 'package:lyricapture/data/datasources/spotify_remote_data_source.dart'
    as _i13;
import 'package:lyricapture/data/models/lyrics_model.dart' as _i5;
import 'package:lyricapture/data/models/song_model.dart' as _i14;
import 'package:lyricapture/data/models/spotify_token_model.dart' as _i4;
import 'package:lyricapture/domain/entities/lyrics.dart' as _i3;
import 'package:lyricapture/domain/entities/song.dart' as _i9;
import 'package:lyricapture/domain/entities/spotify_token.dart' as _i2;
import 'package:lyricapture/domain/repositories/image_capture_repository.dart'
    as _i11;
import 'package:lyricapture/domain/repositories/lyrics_repository.dart' as _i10;
import 'package:lyricapture/domain/repositories/spotify_repository.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSpotifyToken_0 extends _i1.SmartFake implements _i2.SpotifyToken {
  _FakeSpotifyToken_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLyrics_1 extends _i1.SmartFake implements _i3.Lyrics {
  _FakeLyrics_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSpotifyTokenModel_2 extends _i1.SmartFake
    implements _i4.SpotifyTokenModel {
  _FakeSpotifyTokenModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLyricsModel_3 extends _i1.SmartFake implements _i5.LyricsModel {
  _FakeLyricsModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SpotifyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpotifyRepository extends _i1.Mock implements _i7.SpotifyRepository {
  MockSpotifyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.SpotifyToken> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i8.Future<_i2.SpotifyToken>.value(_FakeSpotifyToken_0(
          this,
          Invocation.method(
            #getToken,
            [],
          ),
        )),
      ) as _i8.Future<_i2.SpotifyToken>);

  @override
  _i8.Future<List<_i9.Song>> searchSongs(
    String? query,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchSongs,
          [
            query,
            token,
          ],
        ),
        returnValue: _i8.Future<List<_i9.Song>>.value(<_i9.Song>[]),
      ) as _i8.Future<List<_i9.Song>>);
}

/// A class which mocks [LyricsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLyricsRepository extends _i1.Mock implements _i10.LyricsRepository {
  MockLyricsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Lyrics> getLyrics(
    String? trackName,
    String? artistName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLyrics,
          [
            trackName,
            artistName,
          ],
        ),
        returnValue: _i8.Future<_i3.Lyrics>.value(_FakeLyrics_1(
          this,
          Invocation.method(
            #getLyrics,
            [
              trackName,
              artistName,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Lyrics>);
}

/// A class which mocks [ImageCaptureRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageCaptureRepository extends _i1.Mock
    implements _i11.ImageCaptureRepository {
  MockImageCaptureRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> captureLyricsToImage(
    String? lyricsText, {
    String? songTitle,
    String? artistName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureLyricsToImage,
          [lyricsText],
          {
            #songTitle: songTitle,
            #artistName: artistName,
          },
        ),
        returnValue: _i8.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #captureLyricsToImage,
            [lyricsText],
            {
              #songTitle: songTitle,
              #artistName: artistName,
            },
          ),
        )),
      ) as _i8.Future<String>);
}

/// A class which mocks [SpotifyRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpotifyRemoteDataSource extends _i1.Mock
    implements _i13.SpotifyRemoteDataSource {
  MockSpotifyRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.SpotifyTokenModel> getToken(
    String? clientId,
    String? clientSecret,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [
            clientId,
            clientSecret,
          ],
        ),
        returnValue:
            _i8.Future<_i4.SpotifyTokenModel>.value(_FakeSpotifyTokenModel_2(
          this,
          Invocation.method(
            #getToken,
            [
              clientId,
              clientSecret,
            ],
          ),
        )),
      ) as _i8.Future<_i4.SpotifyTokenModel>);

  @override
  _i8.Future<List<_i14.SongModel>> searchSongs(
    String? query,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchSongs,
          [
            query,
            token,
          ],
        ),
        returnValue: _i8.Future<List<_i14.SongModel>>.value(<_i14.SongModel>[]),
      ) as _i8.Future<List<_i14.SongModel>>);
}

/// A class which mocks [LrcLibRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLrcLibRemoteDataSource extends _i1.Mock
    implements _i15.LrcLibRemoteDataSource {
  MockLrcLibRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.LyricsModel> getLyrics(
    String? trackName,
    String? artistName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLyrics,
          [
            trackName,
            artistName,
          ],
        ),
        returnValue: _i8.Future<_i5.LyricsModel>.value(_FakeLyricsModel_3(
          this,
          Invocation.method(
            #getLyrics,
            [
              trackName,
              artistName,
            ],
          ),
        )),
      ) as _i8.Future<_i5.LyricsModel>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i6.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i17.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i17.Uint8List>.value(_i17.Uint8List(0)),
      ) as _i8.Future<_i17.Uint8List>);

  @override
  _i8.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
